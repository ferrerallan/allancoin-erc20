/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AllanCoinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCharity"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "charities"
      | "currentCharity"
      | "decimals"
      | "donationPercentage"
      | "hasVoted"
      | "name"
      | "selectCharity"
      | "setDonationPercentage"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "voteForCharity"
      | "votingDuration"
      | "votingEndTime"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CharityAdded"
      | "CharitySelected"
      | "CharityVoted"
      | "Donation"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCharity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "charities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCharity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "donationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selectCharity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDonationPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteForCharity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addCharity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "charities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDonationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteForCharity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharityAddedEvent {
  export type InputTuple = [charity: AddressLike];
  export type OutputTuple = [charity: string];
  export interface OutputObject {
    charity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharitySelectedEvent {
  export type InputTuple = [charity: AddressLike];
  export type OutputTuple = [charity: string];
  export interface OutputObject {
    charity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CharityVotedEvent {
  export type InputTuple = [voter: AddressLike, charity: AddressLike];
  export type OutputTuple = [voter: string, charity: string];
  export interface OutputObject {
    voter: string;
    charity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonationEvent {
  export type InputTuple = [
    from: AddressLike,
    charity: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, charity: string, value: bigint];
  export interface OutputObject {
    from: string;
    charity: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AllanCoin extends BaseContract {
  connect(runner?: ContractRunner | null): AllanCoin;
  waitForDeployment(): Promise<this>;

  interface: AllanCoinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCharity: TypedContractMethod<
    [charityAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  charities: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { charityAddress: string; votes: bigint }],
    "view"
  >;

  currentCharity: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  donationPercentage: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  selectCharity: TypedContractMethod<[], [void], "nonpayable">;

  setDonationPercentage: TypedContractMethod<
    [percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  voteForCharity: TypedContractMethod<
    [charityIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingDuration: TypedContractMethod<[], [bigint], "view">;

  votingEndTime: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCharity"
  ): TypedContractMethod<[charityAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "charities"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { charityAddress: string; votes: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentCharity"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "donationPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectCharity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDonationPercentage"
  ): TypedContractMethod<[percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteForCharity"
  ): TypedContractMethod<[charityIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votingDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingEndTime"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CharityAdded"
  ): TypedContractEvent<
    CharityAddedEvent.InputTuple,
    CharityAddedEvent.OutputTuple,
    CharityAddedEvent.OutputObject
  >;
  getEvent(
    key: "CharitySelected"
  ): TypedContractEvent<
    CharitySelectedEvent.InputTuple,
    CharitySelectedEvent.OutputTuple,
    CharitySelectedEvent.OutputObject
  >;
  getEvent(
    key: "CharityVoted"
  ): TypedContractEvent<
    CharityVotedEvent.InputTuple,
    CharityVotedEvent.OutputTuple,
    CharityVotedEvent.OutputObject
  >;
  getEvent(
    key: "Donation"
  ): TypedContractEvent<
    DonationEvent.InputTuple,
    DonationEvent.OutputTuple,
    DonationEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CharityAdded(address)": TypedContractEvent<
      CharityAddedEvent.InputTuple,
      CharityAddedEvent.OutputTuple,
      CharityAddedEvent.OutputObject
    >;
    CharityAdded: TypedContractEvent<
      CharityAddedEvent.InputTuple,
      CharityAddedEvent.OutputTuple,
      CharityAddedEvent.OutputObject
    >;

    "CharitySelected(address)": TypedContractEvent<
      CharitySelectedEvent.InputTuple,
      CharitySelectedEvent.OutputTuple,
      CharitySelectedEvent.OutputObject
    >;
    CharitySelected: TypedContractEvent<
      CharitySelectedEvent.InputTuple,
      CharitySelectedEvent.OutputTuple,
      CharitySelectedEvent.OutputObject
    >;

    "CharityVoted(address,address)": TypedContractEvent<
      CharityVotedEvent.InputTuple,
      CharityVotedEvent.OutputTuple,
      CharityVotedEvent.OutputObject
    >;
    CharityVoted: TypedContractEvent<
      CharityVotedEvent.InputTuple,
      CharityVotedEvent.OutputTuple,
      CharityVotedEvent.OutputObject
    >;

    "Donation(address,address,uint256)": TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;
    Donation: TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
